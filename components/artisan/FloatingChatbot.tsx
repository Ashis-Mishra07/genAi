'use client';

import { useTranslation } from '@/lib/i18n/hooks';
import { MessageCircle, Mic, Send, X, Minimize2, Maximize2, Loader2 } from 'lucide-react';
import { useEffect, useRef, useState } from 'react';

interface Message {
  id: string;
  type: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  isLoading?: boolean;
}

export default function FloatingChatbot() {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const audioChunksRef = useRef<Blob[]>([]);
  const { t, currentLocale } = useTranslation();

  // Scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Initialize with welcome message
  useEffect(() => {
    if (messages.length === 0) {
      const welcomeMessage: Message = {
        id: Date.now().toString(),
        type: 'assistant',
        content: getWelcomeMessage(currentLocale),
        timestamp: new Date(),
      };
      setMessages([welcomeMessage]);
    }
  }, [currentLocale]);

  const getWelcomeMessage = (locale: string) => {
    const welcomeMessages: Record<string, string> = {
      en: `ЁЯЩП Namaste! I'm your AI assistant here to help you with your artisan business.

I can help you with:
ЁЯУж **Product Management** - Check your products, sales, and inventory
ЁЯУК **Business Analytics** - View your sales, orders, and performance
ЁЯТ░ **Financial Information** - Track earnings and payment details
ЁЯУЭ **Order Management** - Check customer orders and their status
тЭУ **General Questions** - Answer any questions about your business

Feel free to ask me anything in your preferred language!`,
      hi: `ЁЯЩП рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ AI рд╕рд╣рд╛рдпрдХ рд╣реВрдВ рдФрд░ рдЖрдкрдХреЗ рдХрд╛рд░реАрдЧрд░ рд╡реНрдпрд╡рд╕рд╛рдп рдореЗрдВ рдорджрдж рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдВ рд╣реВрдВред

рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ:
ЁЯУж **рдЙрддреНрдкрд╛рдж рдкреНрд░рдмрдВрдзрди** - рдЕрдкрдиреЗ рдЙрддреНрдкрд╛рдж, рдмрд┐рдХреНрд░реА рдФрд░ рдЗрдиреНрд╡реЗрдВрдЯрд░реА рджреЗрдЦреЗрдВ
ЁЯУК **рд╡реНрдпрд╛рдкрд╛рд░ рд╡рд┐рд╢реНрд▓реЗрд╖рдг** - рдЕрдкрдиреА рдмрд┐рдХреНрд░реА, рдСрд░реНрдбрд░ рдФрд░ рдкреНрд░рджрд░реНрд╢рди рджреЗрдЦреЗрдВ
ЁЯТ░ **рд╡рд┐рддреНрддреАрдп рдЬрд╛рдирдХрд╛рд░реА** - рдХрдорд╛рдИ рдФрд░ рднреБрдЧрддрд╛рди рд╡рд┐рд╡рд░рдг рдЯреНрд░реИрдХ рдХрд░реЗрдВ
ЁЯУЭ **рдСрд░реНрдбрд░ рдкреНрд░рдмрдВрдзрди** - рдЧреНрд░рд╛рд╣рдХ рдСрд░реНрдбрд░ рдФрд░ рдЙрдирдХреА рд╕реНрдерд┐рддрд┐ рдЬрд╛рдВрдЪреЗрдВ
тЭУ **рд╕рд╛рдорд╛рдиреНрдп рдкреНрд░рд╢реНрди** - рдЖрдкрдХреЗ рд╡реНрдпрд╡рд╕рд╛рдп рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреЛрдИ рднреА рдкреНрд░рд╢реНрди рдХрд╛ рдЙрддреНрддрд░ рджреЗрдВ

рдЕрдкрдиреА рдкрд╕рдВрджреАрджрд╛ рднрд╛рд╖рд╛ рдореЗрдВ рдореБрдЭрд╕реЗ рдХреБрдЫ рднреА рдкреВрдЫрдиреЗ рдХреЗ рд▓рд┐рдП рд╕реНрд╡рддрдВрддреНрд░ рдорд╣рд╕реВрд╕ рдХрд░реЗрдВ!`,
      bn: `ЁЯЩП ржиржорж╕рзНржХрж╛рж░! ржЖржорж┐ ржЖржкржирж╛рж░ AI рж╕рж╣рж╛ржпрж╝ржХ ржПржмржВ ржЖржкржирж╛рж░ ржХрж╛рж░рзБрж╢рж┐рж▓рзНржк ржмрзНржпржмрж╕рж╛ржпрж╝рзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржПржЦрж╛ржирзЗ ржЖржЫрж┐ред

ржЖржорж┐ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐:
ЁЯУж **ржкржгрзНржп ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛** - ржЖржкржирж╛рж░ ржкржгрзНржп, ржмрж┐ржХрзНрж░ржпрж╝ ржПржмржВ ржЗржиржнрзЗржирзНржЯрж░рж┐ ржжрзЗржЦрзБржи
ЁЯУК **ржмрзНржпржмрж╕рж╛ржпрж╝рж┐ржХ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг** - ржЖржкржирж╛рж░ ржмрж┐ржХрзНрж░ржпрж╝, ржЕрж░рзНржбрж╛рж░ ржПржмржВ ржХрж░рзНржоржХрзНрж╖ржорждрж╛ ржжрзЗржЦрзБржи
ЁЯТ░ **ржЖрж░рзНржерж┐ржХ рждржерзНржп** - ржЖржпрж╝ ржПржмржВ ржкрзЗржорзЗржирзНржЯ ржмрж┐ржмрж░ржг ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рзБржи
ЁЯУЭ **ржЕрж░рзНржбрж╛рж░ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛** - ржЧрзНрж░рж╛рж╣ржХ ржЕрж░рзНржбрж╛рж░ ржПржмржВ рждрж╛ржжрзЗрж░ рж╕рзНржерж┐рждрж┐ ржЪрзЗржХ ржХрж░рзБржи
тЭУ **рж╕рж╛ржзрж╛рж░ржг ржкрзНрж░рж╢рзНржи** - ржЖржкржирж╛рж░ ржмрзНржпржмрж╕рж╛ рж╕ржорзНржкрж░рзНржХрзЗ ржпрзЗржХрзЛржирзЛ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржжрж┐ржи

ржЖржкржирж╛рж░ ржкржЫржирзНржжрзЗрж░ ржнрж╛рж╖рж╛ржпрж╝ ржЖржорж╛ржХрзЗ ржпрзЗржХрзЛржирзЛ ржХрж┐ржЫрзБ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рждрзЗ ржирж┐рж░рзНржжрзНржмрж┐ржзрж╛ржпрж╝!`,
      te: `ЁЯЩП р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! р░ир▒Зр░ир▒Б р░ор▒А AI р░╕р░╣р░╛р░пр░Хр▒Бр░бр░┐р░ир░┐ р░ор░░р░┐р░пр▒Б р░ор▒А р░Хр░│р░╛р░Хр░╛р░░р▒Бр░▓ р░╡р▒Нр░пр░╛р░кр░╛р░░р░Вр░▓р▒Л р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░бр░╛р░ир░┐р░Хр░┐ р░Зр░Хр▒Нр░Хр░б р░Йр░ир▒Нр░ир░╛р░ир▒Бред

р░ир▒Зр░ир▒Б р░ор▒Ар░Хр▒Б р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Чр░▓р░ир▒Б:
ЁЯУж **р░Йр░др▒Нр░кр░др▒Нр░др░┐ р░ир░┐р░░р▒Нр░╡р░╣р░г** - р░ор▒А р░Йр░др▒Нр░кр░др▒Нр░др▒Бр░▓р▒Б, р░Ер░ор▒Нр░ор░Хр░╛р░▓р▒Б р░ор░░р░┐р░пр▒Б р░Зр░ир▒Нр░╡р▒Жр░Вр░Яр░░р▒Ар░ир░┐ р░Ър▒Вр░бр░Вр░бр░┐
ЁЯУК **р░╡р▒Нр░пр░╛р░кр░╛р░░ р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г** - р░ор▒А р░Ер░ор▒Нр░ор░Хр░╛р░▓р▒Б, р░Жр░░р▒Нр░бр░░р▒Нр░▓р▒Б р░ор░░р░┐р░пр▒Б р░кр░ир░┐р░др▒Ар░░р▒Бр░ир▒Б р░Ър▒Вр░бр░Вр░бр░┐
ЁЯТ░ **р░Жр░░р▒Нр░ер░┐р░Х р░╕р░ор░╛р░Ър░╛р░░р░В** - р░Жр░жр░╛р░пр░В р░ор░░р░┐р░пр▒Б р░Ър▒Жр░▓р▒Нр░▓р░┐р░Вр░кр▒Б р░╡р░┐р░╡р░░р░╛р░▓р░ир▒Б р░Яр▒Нр░░р░╛р░Хр▒Н р░Ър▒Зр░пр░Вр░бр░┐
ЁЯУЭ **р░Жр░░р▒Нр░бр░░р▒Н р░ир░┐р░░р▒Нр░╡р░╣р░г** - р░Хр░╕р▒Нр░Яр░ор░░р▒Н р░Жр░░р▒Нр░бр░░р▒Нр░▓р▒Б р░ор░░р░┐р░пр▒Б р░╡р░╛р░Яр░┐ р░╕р▒Нр░ер░┐р░др░┐р░ир░┐ р░др░ир░┐р░Цр▒А р░Ър▒Зр░пр░Вр░бр░┐
тЭУ **р░╕р░╛р░зр░╛р░░р░г р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б** - р░ор▒А р░╡р▒Нр░пр░╛р░кр░╛р░░р░В р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Пр░жр▒Ир░ир░╛ р░кр▒Нр░░р░╢р▒Нр░ир░Хр▒Б р░╕р░ор░╛р░зр░╛р░ир░В

р░ор▒Ар░Хр▒Б р░Зр░╖р▒Нр░Яр░ор▒Ир░и р░нр░╛р░╖р░▓р▒Л р░ир░ир▒Нр░ир▒Б р░Пр░жр▒Ир░ир░╛ р░Ер░бр░Чр░бр░╛р░ир░┐р░Хр░┐ р░╕р░Вр░Хр▒Лр░Ър░┐р░Вр░Ър░Хр░Вр░бр░┐!`,
      ta: `ЁЯЩП ро╡рогроХрпНроХроорпН! роиро╛ройрпН роЙроЩрпНроХро│рпН AI роЙродро╡ро┐ропро╛ро│ро░рпН, роЙроЩрпНроХро│рпН роХрпИро╡ро┐ройрпИроЮро░рпН ро╡рогро┐роХродрпНродро┐ро▒рпНроХрпБ роЙродро╡ роЗроЩрпНроХрпЗ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпНред

роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ роорпБроЯро┐ропрпБроорпН:
ЁЯУж **родропро╛ро░ро┐рокрпНрокрпБ роиро┐ро░рпНро╡ро╛роХроорпН** - роЙроЩрпНроХро│рпН родропро╛ро░ро┐рокрпНрокрпБроХро│рпН, ро╡ро┐ро▒рпНрокройрпИ рооро▒рпНро▒рпБроорпН роЪро░роХрпНроХрпБроХро│рпИрокрпН рокро╛ро░рпНроХрпНроХро╡рпБроорпН
ЁЯУК **ро╡рогро┐роХ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ** - роЙроЩрпНроХро│рпН ро╡ро┐ро▒рпНрокройрпИ, роЖро░рпНроЯро░рпНроХро│рпН рооро▒рпНро▒рпБроорпН роЪрпЖропро▓рпНродро┐ро▒ройрпИрокрпН рокро╛ро░рпНроХрпНроХро╡рпБроорпН
ЁЯТ░ **роиро┐родро┐ родроХро╡ро▓рпН** - ро╡ро░рпБрооро╛ройроорпН рооро▒рпНро▒рпБроорпН рокрогроорпН роЪрпЖро▓рпБродрпНродрпБроорпН ро╡ро┐ро╡ро░роЩрпНроХро│рпИроХрпН роХрогрпНроХро╛рогро┐роХрпНроХро╡рпБроорпН
ЁЯУЭ **роЖро░рпНроЯро░рпН роиро┐ро░рпНро╡ро╛роХроорпН** - ро╡ро╛роЯро┐роХрпНроХрпИропро╛ро│ро░рпН роЖро░рпНроЯро░рпНроХро│рпИропрпБроорпН роЕро╡ро▒рпНро▒ро┐ройрпН роиро┐ро▓рпИропрпИропрпБроорпН роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН
тЭУ **рокрпКродрпБ роХрпЗро│рпНро╡ро┐роХро│рпН** - роЙроЩрпНроХро│рпН ро╡рогро┐роХроорпН рокро▒рпНро▒ро┐роп роОроирпНрод роХрпЗро│рпНро╡ро┐роХрпНроХрпБроорпН рокродро┐ро▓ро│ро┐роХрпНроХро╡рпБроорпН

роЙроЩрпНроХро│рпН ро╡ро┐ро░рпБрокрпНрокрооро╛рой роорпКро┤ро┐ропро┐ро▓рпН роОройрпНройро┐роЯроорпН роОродрпИропрпБроорпН роХрпЗроЯрпНроХ родропроЩрпНроХ ро╡рпЗрогрпНроЯро╛роорпН!`,
      ml: `ЁЯЩП р┤ир┤ор┤╕р╡Нр┤Хр┤╛р┤░р┤В! р┤Юр┤╛р╡╗ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж AI р┤╕р┤╣р┤╛р┤пр┤Хр┤ир┤╛р┤гр╡Н, р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Хр┤░р┤Хр╡Чр┤╢р┤▓ р┤мр┤┐р┤╕р┤┐р┤ир┤╕р┤┐р┤ир╡Ж р┤╕р┤╣р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤Зр┤╡р┤┐р┤Яр╡Жр┤пр╡Бр┤гр╡Нр┤Яр╡Нред

р┤Ор┤ир┤┐р┤Хр╡Нр┤Хр╡Н р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Ж р┤╕р┤╣р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр┤╛р┤В:
ЁЯУж **р┤Йр╡╜р┤кр╡Нр┤кр┤ир╡Нр┤и р┤ир┤┐р╡╝р┤╡р┤╣р┤гр┤В** - р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Йр╡╜р┤кр╡Нр┤кр┤ир╡Нр┤ир┤Щр╡Нр┤Щр╡╛, р┤╡р┤┐р╡╜р┤кр╡Нр┤кр┤и, р┤Зр╡╗р┤╡р╡Жр┤ир╡Нр┤▒р┤▒р┤┐ р┤Хр┤╛р┤гр╡Бр┤Х
ЁЯУК **р┤мр┤┐р┤╕р┤┐р┤ир┤╕р╡Н р┤Ер┤ир┤╛р┤▓р┤┐р┤▒р╡Нр┤▒р┤┐р┤Хр╡Нр┤╕р╡Н** - р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤╡р┤┐р╡╜р┤кр╡Нр┤кр┤и, р┤Ур╡╝р┤бр┤▒р╡Бр┤Хр╡╛, р┤кр╡Нр┤░р┤Хр┤Яр┤ир┤В р┤Хр┤╛р┤гр╡Бр┤Х
ЁЯТ░ **р┤╕р┤╛р┤ор╡Нр┤кр┤др╡Нр┤др┤┐р┤Х р┤╡р┤┐р┤╡р┤░р┤В** - р┤╡р┤░р╡Бр┤ор┤╛р┤ир┤╡р╡Бр┤В р┤кр╡Зр┤пр╡Нр┤ор╡Жр┤ир╡Нр┤▒р╡Н р┤╡р┤┐р┤╢р┤жр┤╛р┤Вр┤╢р┤Щр╡Нр┤Щр┤│р╡Бр┤В р┤Яр╡Нр┤░р┤╛р┤Хр╡Нр┤Хр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х
ЁЯУЭ **р┤Ур╡╝р┤бр╡╝ р┤ор┤╛р┤ир╡Зр┤Ьр╡Нр┤ор╡Жр┤ир╡Нр┤▒р╡Н** - р┤Йр┤кр┤нр╡Лр┤Хр╡Нр┤др╡Г р┤Ур╡╝р┤бр┤▒р╡Бр┤Хр┤│р╡Бр┤В р┤Ер┤╡р┤пр╡Бр┤Яр╡Ж р┤ир┤┐р┤▓р┤пр╡Бр┤В р┤кр┤░р┤┐р┤╢р╡Лр┤зр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х
тЭУ **р┤кр╡Кр┤др╡Б р┤Ър╡Лр┤жр╡Нр┤пр┤Щр╡Нр┤Щр╡╛** - р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤мр┤┐р┤╕р┤┐р┤ир┤╕р┤┐р┤ир╡Жр┤Хр╡Нр┤Хр╡Бр┤▒р┤┐р┤Ър╡Нр┤Ър╡Бр┤│р╡Нр┤│ р┤Пр┤др╡Н р┤Ър╡Лр┤жр╡Нр┤пр┤др╡Нр┤др┤┐р┤ир╡Бр┤В р┤Йр┤др╡Нр┤др┤░р┤В

р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Зр┤╖р╡Нр┤Я р┤нр┤╛р┤╖р┤пр┤┐р╡╜ р┤Ор┤ир╡Нр┤др╡Бр┤В р┤Ор┤ир╡Нр┤ир╡Лр┤Яр╡Н р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤ор┤Яр┤┐р┤Хр╡Нр┤Хр╡Зр┤гр╡Нр┤Яр┤др┤┐р┤▓р╡Нр┤▓!`,
      kn: `ЁЯЩП р▓ир▓ор▓╕р│Нр▓Хр▓╛р▓░! р▓ир▓╛р▓ир│Б р▓ир▓┐р▓ор│Нр▓о AI р▓╕р▓╣р▓╛р▓пр▓Х р▓ор▓др│Нр▓др│Б р▓ир▓┐р▓ор│Нр▓о р▓Хр▓░р▓Хр│Мр▓╢р▓▓ р▓╡р│Нр▓пр▓╡р▓╣р▓╛р▓░р▓Хр│Нр▓Хр│Ж р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр▓▓р│Б р▓Зр▓▓р│Нр▓▓р▓┐р▓жр│Нр▓жр│Зр▓ир│Жред

р▓ир▓╛р▓ир│Б р▓ир▓┐р▓ор▓Чр│Ж р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр▓мр▓╣р│Бр▓жр│Б:
ЁЯУж **р▓Йр▓др│Нр▓кр▓ир│Нр▓и р▓ир▓┐р▓░р│Нр▓╡р▓╣р▓гр│Ж** - р▓ир▓┐р▓ор│Нр▓о р▓Йр▓др│Нр▓кр▓ир│Нр▓ир▓Чр▓│р│Б, р▓ор▓╛р▓░р▓╛р▓Я р▓ор▓др│Нр▓др│Б р▓жр▓╛р▓╕р│Нр▓др▓╛р▓ир│Б р▓ир│Лр▓бр▓┐
ЁЯУК **р▓╡р│Нр▓пр▓╛р▓кр▓╛р▓░ р▓╡р▓┐р▓╢р│Нр▓▓р│Зр▓╖р▓гр│Ж** - р▓ир▓┐р▓ор│Нр▓о р▓ор▓╛р▓░р▓╛р▓Я, р▓Жр▓░р│Нр▓бр▓░р│НтАМр▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓Хр▓╛р▓░р│Нр▓пр▓Хр│Нр▓╖р▓ор▓др│Ж р▓ир│Лр▓бр▓┐
ЁЯТ░ **р▓╣р▓гр▓Хр▓╛р▓╕р▓┐р▓и р▓ор▓╛р▓╣р▓┐р▓др▓┐** - р▓Жр▓жр▓╛р▓п р▓ор▓др│Нр▓др│Б р▓кр▓╛р▓╡р▓др▓┐ р▓╡р▓┐р▓╡р▓░р▓Чр▓│р▓ир│Нр▓ир│Б р▓Яр│Нр▓░р│Нр▓пр▓╛р▓Хр│Н р▓ор▓╛р▓бр▓┐
ЁЯУЭ **р▓Жр▓░р│Нр▓бр▓░р│Н р▓ир▓┐р▓░р│Нр▓╡р▓╣р▓гр│Ж** - р▓Чр│Нр▓░р▓╛р▓╣р▓Х р▓Жр▓░р│Нр▓бр▓░р│НтАМр▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓Ер▓╡р│Бр▓Чр▓│ р▓╕р│Нр▓ер▓┐р▓др▓┐ р▓кр▓░р▓┐р▓╢р│Ар▓▓р▓┐р▓╕р▓┐
тЭУ **р▓╕р▓╛р▓ор▓╛р▓ир│Нр▓п р▓кр│Нр▓░р▓╢р│Нр▓ир│Жр▓Чр▓│р│Б** - р▓ир▓┐р▓ор│Нр▓о р▓╡р│Нр▓пр▓╡р▓╣р▓╛р▓░р▓ж р▓мр▓Чр│Нр▓Чр│Ж р▓пр▓╛р▓╡р│Бр▓жр│З р▓кр│Нр▓░р▓╢р│Нр▓ир│Жр▓Чр│Ж р▓Йр▓др│Нр▓др▓░р▓┐р▓╕р▓┐

р▓ир▓┐р▓ор│Нр▓о р▓Жр▓жр│Нр▓пр▓др│Жр▓п р▓нр▓╛р▓╖р│Жр▓пр▓▓р│Нр▓▓р▓┐ р▓ир▓ир│Нр▓ир▓ир│Нр▓ир│Б р▓Пр▓ир│Б р▓мр│Зр▓Хр▓╛р▓жр▓░р│В р▓Хр│Зр▓│р▓▓р│Б р▓ор│Бр▓Хр│Нр▓др▓╡р▓╛р▓Чр▓┐р▓░р▓┐!`,
      gu: `ЁЯЩП ркиркорк╕рлНркдрлЗ! рк╣рлБркВ ркдркорк╛рк░рлЛ AI рк╕рк╣рк╛ркпркХ ркЫрлБркВ ркЕркирлЗ ркдркорк╛рк░рк╛ ркХрк╛рк░рлАркЧрк░ рк╡рлНркпрк╡рк╕рк╛ркпркорк╛ркВ ркоркжркж ркХрк░рк╡рк╛ ркорк╛ркЯрлЗ ркЕрк╣рлАркВ ркЫрлБркВред

рк╣рлБркВ ркдркоркирлЗ ркоркжркж ркХрк░рлА рк╢ркХрлБркВ ркЫрлБркВ:
ЁЯУж **ркЙркдрлНрккрк╛ркжрки рк╡рлНркпрк╡рк╕рлНркерк╛рккрки** - ркдркорк╛рк░рк╛ ркЙркдрлНрккрк╛ркжркирлЛ, рк╡рлЗркЪрк╛ркг ркЕркирлЗ ркЗркирлНрк╡рлЗркирлНркЯрк░рлА ркЬрлБркУ
ЁЯУК **рк╡рлНркпрк╛рккрк╛рк░ рк╡рк┐рк╢рлНрк▓рлЗрк╖ркг** - ркдркорк╛рк░рлБркВ рк╡рлЗркЪрк╛ркг, ркУрк░рлНркбрк░ ркЕркирлЗ рккрлНрк░ркжрк░рлНрк╢рки ркЬрлБркУ
ЁЯТ░ **ркирк╛ркгрк╛ркХрлАркп ркорк╛рк╣рк┐ркдрлА** - ркХркорк╛ркгрлА ркЕркирлЗ ркЪрлБркХрк╡ркгрлА рк╡рк┐ркЧркдрлЛ ркЯрлНрк░рлЗркХ ркХрк░рлЛ
ЁЯУЭ **ркУрк░рлНркбрк░ рк╡рлНркпрк╡рк╕рлНркерк╛рккрки** - ркЧрлНрк░рк╛рк╣ркХ ркУрк░рлНркбрк░ ркЕркирлЗ ркдрлЗркоркирлА рк╕рлНркерк┐ркдрк┐ ркдрккрк╛рк╕рлЛ
тЭУ **рк╕рк╛ркорк╛ркирлНркп рккрлНрк░рк╢рлНркирлЛ** - ркдркорк╛рк░рк╛ рк╡рлНркпрк╡рк╕рк╛ркп рк╡рк┐рк╢рлЗ ркХрлЛркИрккркг рккрлНрк░рк╢рлНркиркирлЛ ркЬрк╡рк╛ркм ркЖрккрлЛ

ркдркорк╛рк░рлА рккрк╕ркВркжркирлА ркнрк╛рк╖рк╛ркорк╛ркВ ркоркирлЗ ркХркВркИрккркг рккрлВркЫрк╡рк╛ ркорк╛ркЯрлЗ ркирк┐ркГрк╕ркВркХрлЛркЪ!`,
      mr: `ЁЯЩП рдирдорд╕реНрдХрд╛рд░! рдореА рддреБрдордЪрд╛ AI рд╕рд╣рд╛рдпреНрдпрдХ рдЖрд╣реЗ рдЖрдгрд┐ рддреБрдордЪреНрдпрд╛ рдХрд╛рд░рд╛рдЧреАрд░ рд╡реНрдпрд╡рд╕рд╛рдпрд╛рдд рдорджрдд рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА рдпреЗрдереЗ рдЖрд╣реЗред

рдореА рддреБрдореНрд╣рд╛рд▓рд╛ рдорджрдд рдХрд░реВ рд╢рдХрддреЛ:
ЁЯУж **рдЙрддреНрдкрд╛рджрди рд╡реНрдпрд╡рд╕реНрдерд╛рдкрди** - рддреБрдордЪреА рдЙрддреНрдкрд╛рджрдиреЗ, рд╡рд┐рдХреНрд░реА рдЖрдгрд┐ рдЗрдиреНрд╡реНрд╣реЗрдВрдЯрд░реА рдкрд╣рд╛
ЁЯУК **рд╡реНрдпрд╡рд╕рд╛рдп рд╡рд┐рд╢реНрд▓реЗрд╖рдг** - рддреБрдордЪреА рд╡рд┐рдХреНрд░реА, рдСрд░реНрдбрд░ рдЖрдгрд┐ рдХрд╛рдордЧрд┐рд░реА рдкрд╣рд╛
ЁЯТ░ **рдЖрд░реНрдерд┐рдХ рдорд╛рд╣рд┐рддреА** - рдХрдорд╛рдИ рдЖрдгрд┐ рдкреЗрдореЗрдВрдЯ рддрдкрд╢реАрд▓ рдЯреНрд░реЕрдХ рдХрд░рд╛
ЁЯУЭ **рдСрд░реНрдбрд░ рд╡реНрдпрд╡рд╕реНрдерд╛рдкрди** - рдЧреНрд░рд╛рд╣рдХ рдСрд░реНрдбрд░ рдЖрдгрд┐ рддреНрдпрд╛рдВрдЪреА рд╕реНрдерд┐рддреА рддрдкрд╛рд╕рд╛
тЭУ **рд╕рд╛рдорд╛рдиреНрдп рдкреНрд░рд╢реНрди** - рддреБрдордЪреНрдпрд╛ рд╡реНрдпрд╡рд╕рд╛рдпрд╛рдмрджреНрджрд▓ рдХреЛрдгрддреНрдпрд╛рд╣реА рдкреНрд░рд╢реНрдирд╛рдЪреЗ рдЙрддреНрддрд░ рджреНрдпрд╛

рддреБрдордЪреНрдпрд╛ рдЖрд╡рдбрддреНрдпрд╛ рднрд╛рд╖реЗрдд рдорд▓рд╛ рдХрд╛рд╣реАрд╣реА рд╡рд┐рдЪрд╛рд░рдгреНрдпрд╛рд╕ рдореЛрдХрд│реЗ рд╡реНрд╣рд╛!`,
      or: `ЁЯЩП рмирморм╕рнНрмХрм╛рм░! рморнБрмБ рмЖрмкрмгрмЩрнНрмХрм░ AI рм╕рм╣рм╛рнЯрмХ рмПрммрмВ рмЖрмкрмгрмЩрнНрмХ рмХрм╛рм░рнБрм╢рм┐рм│рнНрмкрнА рммрнНрнЯрммрм╕рм╛рнЯрм░рнЗ рм╕рм╛рм╣рм╛рмпрнНрнЯ рмХрм░рм┐рммрм╛рмХрнБ рмПрмарм╛рм░рнЗ рмЕрмЫрм┐ред

рморнБрмБ рмЖрмкрмгрмЩрнНрмХрнБ рм╕рм╛рм╣рм╛рмпрнНрнЯ рмХрм░рм┐рмкрм╛рм░рм┐рммрм┐:
ЁЯУж **рмЙрмдрнНрмкрм╛рмж рмкрм░рм┐рмЪрм╛рм│рмирм╛** - рмЖрмкрмгрмЩрнНрмХ рмЙрмдрнНрмкрм╛рмж, рммрм┐рмХрнНрм░рнЯ рмПрммрмВ рмЗрмирнНтАМрмнрнЗрмгрнНрмЯрм░рм┐ рмжрнЗрмЦрмирнНрмдрнБ
ЁЯУК **рммрнНрнЯрммрм╕рм╛рнЯ рммрм┐рм╢рнНрм│рнЗрм╖рмг** - рмЖрмкрмгрмЩрнНрмХ рммрм┐рмХрнНрм░рнЯ, рмЕрм░рнНрмбрм░ рмПрммрмВ рмкрнНрм░рмжрм░рнНрм╢рми рмжрнЗрмЦрмирнНрмдрнБ
ЁЯТ░ **рмЖрм░рнНрмерм┐рмХ рм╕рнВрмЪрмирм╛** - рмЖрнЯ рмПрммрмВ рмкрнЗрморнЗрмгрнНрмЯ рммрм┐рммрм░рмгрнА рмЯрнНрм░рм╛рмХ рмХрм░рмирнНрмдрнБ
ЁЯУЭ **рмЕрм░рнНрмбрм░ рмкрм░рм┐рмЪрм╛рм│рмирм╛** - рмЧрнНрм░рм╛рм╣рмХ рмЕрм░рнНрмбрм░ рмПрммрмВ рм╕рнЗрморм╛рмирмЩрнНрмХ рм╕рнНрмерм┐рмдрм┐ рмпрм╛рмЮрнНрмЪ рмХрм░рмирнНрмдрнБ
тЭУ **рм╕рм╛рмзрм╛рм░рмг рмкрнНрм░рм╢рнНрми** - рмЖрмкрмгрмЩрнНрмХ рммрнНрнЯрммрм╕рм╛рнЯ рммрм┐рм╖рнЯрм░рнЗ рмпрнЗрмХрнМрмгрм╕рм┐ рмкрнНрм░рм╢рнНрмирм░ рмЙрмдрнНрмдрм░ рмжрм┐рмЕрмирнНрмдрнБ

рмЖрмкрмгрмЩрнНрмХ рмкрм╕рмирнНрмжрм░ рмнрм╛рм╖рм╛рм░рнЗ рморнЛрмдрнЗ рмХрм┐рмЫрм┐ рмкрнВрмЫрм┐рммрм╛рмХрнБ рморнБрмХрнНрмд рмЕрмирнБрмнрмм рмХрм░рмирнНрмдрнБ!`,
    };
    return welcomeMessages[locale] || welcomeMessages.en;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!inputValue.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setInputValue('');
    setIsLoading(true);

    try {
      const response = await fetch('/api/artisan/chatbot', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include', // Include cookies for authentication
        body: JSON.stringify({
          message: inputValue,
          language: currentLocale,
          conversationHistory: messages.slice(-5).map((msg) => ({
            role: msg.type === 'user' ? 'user' : 'assistant',
            content: msg.content,
          })),
        }),
      });

      const data = await response.json();

      if (data.success) {
        const assistantMessage: Message = {
          id: (Date.now() + 1).toString(),
          type: 'assistant',
          content: data.content || 'I apologize, I could not process your request.',
          timestamp: new Date(),
        };
        setMessages((prev) => [...prev, assistantMessage]);
      } else {
        throw new Error(data.error || 'Failed to get response');
      }
    } catch (error) {
      console.error('Chatbot error:', error);
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: 'Sorry, I encountered an error. Please try again.',
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const startVoiceRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream);
      mediaRecorderRef.current = mediaRecorder;
      audioChunksRef.current = [];

      mediaRecorder.ondataavailable = (event) => {
        audioChunksRef.current.push(event.data);
      };

      mediaRecorder.onstop = async () => {
        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });
        await processVoiceInput(audioBlob);
        stream.getTracks().forEach((track) => track.stop());
      };

      mediaRecorder.start();
      setIsRecording(true);
    } catch (error) {
      console.error('Error starting voice recording:', error);
      alert('Could not access microphone. Please check permissions.');
    }
  };

  const stopVoiceRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
    }
  };

  // Format markdown text to HTML-like JSX
  const formatMessage = (text: string) => {
    // Split by lines to handle each line separately
    const lines = text.split('\n');
    
    return lines.map((line, lineIndex) => {
      // Handle headers
      if (line.startsWith('### ')) {
        return (
          <h3 key={lineIndex} className="text-base font-bold mt-3 mb-2 text-orange-300">
            {line.replace('### ', '')}
          </h3>
        );
      }
      if (line.startsWith('## ')) {
        return (
          <h2 key={lineIndex} className="text-lg font-bold mt-3 mb-2 text-orange-300">
            {line.replace('## ', '')}
          </h2>
        );
      }
      if (line.startsWith('# ')) {
        return (
          <h1 key={lineIndex} className="text-xl font-bold mt-3 mb-2 text-orange-300">
            {line.replace('# ', '')}
          </h1>
        );
      }

      // Handle bullet points
      if (line.match(/^[тАв\-\*]\s/)) {
        const content = line.replace(/^[тАв\-\*]\s/, '');
        return (
          <div key={lineIndex} className="flex items-start gap-2 my-1">
            <span className="text-orange-400 mt-1">тАв</span>
            <span className="flex-1">{formatInlineText(content)}</span>
          </div>
        );
      }

      // Handle numbered lists
      if (line.match(/^\d+\.\s/)) {
        const match = line.match(/^(\d+)\.\s(.+)/);
        if (match) {
          return (
            <div key={lineIndex} className="flex items-start gap-2 my-1">
              <span className="text-orange-400 font-semibold">{match[1]}.</span>
              <span className="flex-1">{formatInlineText(match[2])}</span>
            </div>
          );
        }
      }

      // Handle emoji lines (like ЁЯУж, ЁЯТ░, etc.)
      if (line.match(/^[ЁЯУжЁЯТ░ЁЯУКЁЯУЭтЭУЁЯОиЁЯМНЁЯОдЁЯТмЁЯЩПтЬи]/)) {
        return (
          <div key={lineIndex} className="my-2">
            {formatInlineText(line)}
          </div>
        );
      }

      // Empty lines
      if (line.trim() === '') {
        return <br key={lineIndex} />;
      }

      // Regular paragraphs
      return (
        <p key={lineIndex} className="my-1">
          {formatInlineText(line)}
        </p>
      );
    });
  };

  // Format inline text (bold, italic, code)
  const formatInlineText = (text: string) => {
    const parts: React.ReactNode[] = [];
    let currentIndex = 0;
    
    // Match **bold**, *italic*, `code`, and emojis
    const regex = /(\*\*[^*]+\*\*|\*[^*]+\*|`[^`]+`|[ЁЯУжЁЯТ░ЁЯУКЁЯУЭтЭУЁЯОиЁЯМНЁЯОдЁЯТмЁЯЩПтЬиЁЯФФЁЯУ▒ЁЯОпЁЯЪАтЪбя╕ПтЬЕтЭМЁЯМЯЁЯТбЁЯОЙ])/g;
    let match;

    while ((match = regex.exec(text)) !== null) {
      // Add text before the match
      if (match.index > currentIndex) {
        parts.push(text.substring(currentIndex, match.index));
      }

      const matchedText = match[0];
      
      // Bold text **text**
      if (matchedText.startsWith('**') && matchedText.endsWith('**')) {
        parts.push(
          <strong key={match.index} className="font-bold text-orange-300">
            {matchedText.slice(2, -2)}
          </strong>
        );
      }
      // Italic text *text*
      else if (matchedText.startsWith('*') && matchedText.endsWith('*')) {
        parts.push(
          <em key={match.index} className="italic text-orange-200">
            {matchedText.slice(1, -1)}
          </em>
        );
      }
      // Code text `code`
      else if (matchedText.startsWith('`') && matchedText.endsWith('`')) {
        parts.push(
          <code key={match.index} className="bg-slate-900 px-1.5 py-0.5 rounded text-xs font-mono text-orange-300">
            {matchedText.slice(1, -1)}
          </code>
        );
      }
      // Emoji
      else {
        parts.push(
          <span key={match.index} className="text-lg">
            {matchedText}
          </span>
        );
      }

      currentIndex = match.index + matchedText.length;
    }

    // Add remaining text
    if (currentIndex < text.length) {
      parts.push(text.substring(currentIndex));
    }

    return parts.length > 0 ? parts : text;
  };

  const processVoiceInput = async (audioBlob: Blob) => {
    // Add a loading message
    const loadingMessage: Message = {
      id: Date.now().toString(),
      type: 'assistant',
      content: 'Processing your voice message...',
      timestamp: new Date(),
      isLoading: true,
    };
    setMessages((prev) => [...prev, loadingMessage]);

    try {
      const formData = new FormData();
      formData.append('audio', audioBlob);
      formData.append('language', currentLocale);

      const response = await fetch('/api/artisan/chatbot/voice', {
        method: 'POST',
        headers: {
          // No Content-Type header - browser sets it automatically for FormData
        },
        credentials: 'include', // Include cookies for authentication
        body: formData,
      });

      const data = await response.json();

      // Remove loading message
      setMessages((prev) => prev.filter((msg) => !msg.isLoading));

      if (data.success && data.transcription) {
        // Add transcribed message as user message
        const userMessage: Message = {
          id: Date.now().toString(),
          type: 'user',
          content: `ЁЯОд ${data.transcription}`,
          timestamp: new Date(),
        };
        setMessages((prev) => [...prev, userMessage]);

        // Add assistant response
        if (data.response) {
          const assistantMessage: Message = {
            id: (Date.now() + 1).toString(),
            type: 'assistant',
            content: data.response,
            timestamp: new Date(),
          };
          setMessages((prev) => [...prev, assistantMessage]);
        }
      } else {
        throw new Error(data.error || 'Failed to process voice');
      }
    } catch (error) {
      console.error('Voice processing error:', error);
      setMessages((prev) => prev.filter((msg) => !msg.isLoading));
      const errorMessage: Message = {
        id: Date.now().toString(),
        type: 'assistant',
        content: 'Sorry, I could not process your voice message. Please try typing instead.',
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, errorMessage]);
    }
  };

  return (
    <>
      {/* Floating Button */}
      {!isOpen && (
        <button
          onClick={() => setIsOpen(true)}
          className="fixed bottom-6 right-6 z-50 w-16 h-16 bg-gradient-to-br from-orange-500 to-orange-600 rounded-full shadow-2xl flex items-center justify-center hover:scale-110 transition-transform duration-200 animate-bounce"
          aria-label="Open chatbot"
        >
          <MessageCircle className="w-8 h-8 text-white" />
          <span className="absolute -top-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-white animate-pulse"></span>
        </button>
      )}

      {/* Chat Window */}
      {isOpen && (
        <div
          className={`fixed bottom-6 right-6 z-50 bg-slate-800 rounded-2xl shadow-2xl border border-slate-700 transition-all duration-300 ${
            isMinimized ? 'w-80 h-16' : 'w-96 h-[600px]'
          }`}
        >
          {/* Header */}
          <div className="flex items-center justify-between p-4 bg-gradient-to-r from-orange-600 to-orange-500 rounded-t-2xl">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-white rounded-full flex items-center justify-center">
                <MessageCircle className="w-6 h-6 text-orange-600" />
              </div>
              <div>
                <h3 className="font-bold text-white text-sm">AI Assistant</h3>
                <p className="text-xs text-orange-100">Always here to help</p>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <button
                onClick={() => setIsMinimized(!isMinimized)}
                className="text-white hover:bg-orange-600/50 p-1.5 rounded-lg transition-colors"
                aria-label={isMinimized ? 'Maximize' : 'Minimize'}
              >
                {isMinimized ? <Maximize2 className="w-4 h-4" /> : <Minimize2 className="w-4 h-4" />}
              </button>
              <button
                onClick={() => setIsOpen(false)}
                className="text-white hover:bg-orange-600/50 p-1.5 rounded-lg transition-colors"
                aria-label="Close chatbot"
              >
                <X className="w-4 h-4" />
              </button>
            </div>
          </div>

          {/* Chat Content */}
          {!isMinimized && (
            <>
              {/* Messages */}
              <div className="h-[calc(100%-140px)] overflow-y-auto p-4 space-y-4 custom-scrollbar">
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                  >
                    <div
                      className={`max-w-[85%] p-4 rounded-2xl ${
                        message.type === 'user'
                          ? 'bg-gradient-to-r from-orange-600 to-orange-500 text-white shadow-lg shadow-orange-500/20'
                          : 'bg-slate-700 text-slate-100 shadow-lg border border-slate-600'
                      } ${message.isLoading ? 'animate-pulse' : ''}`}
                    >
                      <div className="text-sm leading-relaxed">
                        {message.type === 'user' ? (
                          <p className="whitespace-pre-wrap">{message.content}</p>
                        ) : (
                          <div className="space-y-1">{formatMessage(message.content)}</div>
                        )}
                      </div>
                      <span className="text-xs opacity-60 mt-2 block">
                        {message.timestamp.toLocaleTimeString(currentLocale, {
                          hour: '2-digit',
                          minute: '2-digit',
                        })}
                      </span>
                    </div>
                  </div>
                ))}
                {isLoading && (
                  <div className="flex justify-start">
                    <div className="bg-slate-700 text-slate-100 p-3 rounded-2xl flex items-center gap-2 shadow-lg border border-slate-600">
                      <Loader2 className="w-4 h-4 animate-spin text-orange-400" />
                      <span className="text-sm text-slate-300">Thinking...</span>
                    </div>
                  </div>
                )}
                <div ref={messagesEndRef} />
              </div>

              {/* Input Area */}
              <div className="p-4 border-t border-slate-700 bg-slate-800/50 backdrop-blur-sm">
                <form onSubmit={handleSubmit} className="flex gap-2">
                  <button
                    type="button"
                    onClick={isRecording ? stopVoiceRecording : startVoiceRecording}
                    className={`flex-shrink-0 p-3 rounded-xl transition-all shadow-md ${
                      isRecording
                        ? 'bg-red-500 hover:bg-red-600 animate-pulse shadow-red-500/50'
                        : 'bg-slate-700 hover:bg-slate-600 hover:shadow-slate-600/50'
                    } text-white`}
                    aria-label={isRecording ? 'Stop recording' : 'Start voice recording'}
                  >
                    <Mic className="w-5 h-5" />
                  </button>
                  <input
                    type="text"
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    placeholder={t('search') || 'Type your message...'}
                    className="flex-1 px-4 py-3 bg-slate-700/80 border border-slate-600 rounded-xl focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 text-slate-100 placeholder-slate-400 transition-all"
                    disabled={isLoading || isRecording}
                  />
                  <button
                    type="submit"
                    disabled={isLoading || !inputValue.trim() || isRecording}
                    className="flex-shrink-0 p-3 bg-gradient-to-r from-orange-600 to-orange-500 text-white rounded-xl hover:from-orange-500 hover:to-orange-400 transition-all disabled:opacity-50 disabled:cursor-not-allowed shadow-lg shadow-orange-500/30 hover:shadow-orange-400/40 hover:scale-105 active:scale-95"
                    aria-label="Send message"
                  >
                    <Send className="w-5 h-5" />
                  </button>
                </form>
              </div>
            </>
          )}
        </div>
      )}
      
      {/* Custom Scrollbar Styles */}
      <style jsx>{`
        .custom-scrollbar::-webkit-scrollbar {
          width: 6px;
        }
        .custom-scrollbar::-webkit-scrollbar-track {
          background: rgba(51, 65, 85, 0.3);
          border-radius: 10px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb {
          background: rgba(251, 146, 60, 0.5);
          border-radius: 10px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
          background: rgba(251, 146, 60, 0.8);
        }
      `}</style>
    </>
  );
}
