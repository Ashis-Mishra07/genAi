{
  "name": "Simple Telegram Artisan Bot",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "telegram-trigger",
      "name": "Telegram Bot Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1,
      "position": [250, 400],
      "webhookId": "telegram-artisan-bot",
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-creds",
          "name": "Artisan Bot"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract message data\nconst message = $input.item.json.message;\nconst chatId = message.chat.id.toString();\nconst messageText = message.text || '';\n\nreturn {\n  json: {\n    chatId: chatId,\n    messageText: messageText.trim()\n  }\n};"
      },
      "id": "extract-message",
      "name": "Extract Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 400]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  id, \n  email, \n  name, \n  role,\n  telegram_chat_id,\n  telegram_username,\n  telegram_authorized\nFROM users \nWHERE telegram_chat_id = '{{ $json.chatId }}' \n  AND telegram_authorized = true \n  AND role = 'ARTISAN'\nLIMIT 1;",
        "options": {}
      },
      "id": "check-authorization",
      "name": "Check Authorization",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [650, 400],
      "credentials": {
        "postgres": {
          "id": "postgres-db",
          "name": "Artisan Database"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "authorized",
              "leftValue": "={{ $input.item.json.length }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            },
            {
              "id": "unauthorized",
              "leftValue": "={{ $input.item.json.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "route-authorization",
      "name": "Route Authorization",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [850, 400]
    },
    {
      "parameters": {
        "jsCode": "const messageText = $node[\"Extract Message Data\"].json.messageText.toLowerCase().trim();\nconst chatId = $node[\"Extract Message Data\"].json.chatId;\n\n// Check if this is an authorization attempt\nif (messageText.startsWith('/auth ') || messageText.startsWith('/verify ')) {\n  const parts = messageText.split(' ');\n  if (parts.length >= 2) {\n    const emailOrPhone = parts[1];\n    return {\n      json: {\n        chatId: chatId,\n        commandType: 'auth_request',\n        credential: emailOrPhone,\n        userName: $node[\"Extract Message Data\"].json.userName,\n        telegramUsername: $node[\"Extract Message Data\"].json.telegramUsername\n      }\n    };\n  }\n}\n\n// Check if this is a verification code\nif (messageText.match(/^\\d{6}$/)) {\n  return {\n    json: {\n      chatId: chatId,\n      commandType: 'verify_code',\n      verificationCode: messageText\n    }\n  };\n}\n\n// Default unauthorized response\nreturn {\n  json: {\n    chatId: chatId,\n    commandType: 'unauthorized',\n    userName: $node[\"Extract Message Data\"].json.userName\n  }\n};"
      },
      "id": "handle-unauthorized",
      "name": "Handle Unauthorized",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1050, 500]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "auth_request",
              "leftValue": "={{ $json.commandType }}",
              "rightValue": "auth_request",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "verify_code",
              "leftValue": "={{ $json.commandType }}",
              "rightValue": "verify_code",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "unauthorized",
              "leftValue": "={{ $json.commandType }}",
              "rightValue": "unauthorized",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "route-auth-commands",
      "name": "Route Auth Commands",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [1250, 500]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, email, name, phone, role\nFROM users \nWHERE (email = '{{ $json.credential }}' OR phone = '{{ $json.credential }}')\n  AND role = 'ARTISAN'\n  AND is_active = true\nLIMIT 1;",
        "options": {}
      },
      "id": "find-artisan",
      "name": "Find Artisan",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1450, 400],
      "credentials": {
        "postgres": {
          "id": "postgres-db",
          "name": "Artisan Database"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const artisanData = $input.item.json;\nconst chatId = $node[\"Handle Unauthorized\"].json.chatId;\nconst userName = $node[\"Handle Unauthorized\"].json.userName;\nconst telegramUsername = $node[\"Handle Unauthorized\"].json.telegramUsername;\n\nif (!artisanData || artisanData.length === 0) {\n  return {\n    json: {\n      chatId: chatId,\n      message: `‚ùå <b>Authentication Failed</b>\\n\\nNo artisan account found with that email or phone number.\\n\\nüìù <b>To get access:</b>\\n1. Make sure you have an artisan account\\n2. Use the email or phone from your account\\n3. Try: <code>/auth your@email.com</code>\\n\\nNeed help? Contact support.`,\n      parse_mode: 'HTML',\n      success: false\n    }\n  };\n}\n\nconst artisan = artisanData[0];\n\n// Generate 6-digit verification code\nconst verificationCode = Math.floor(100000 + Math.random() * 900000).toString();\n\nreturn {\n  json: {\n    chatId: chatId,\n    artisanId: artisan.id,\n    artisanEmail: artisan.email,\n    artisanName: artisan.name,\n    verificationCode: verificationCode,\n    userName: userName,\n    telegramUsername: telegramUsername,\n    message: `üîê <b>Verification Code Sent</b>\\n\\nHi ${artisan.name}! üëã\\n\\nYour verification code is: <code>${verificationCode}</code>\\n\\nüì± <b>Next Step:</b>\\nSimply send this 6-digit code as your next message to complete authorization.\\n\\n‚è∞ <b>Note:</b> Code expires in 10 minutes.`,\n    parse_mode: 'HTML',\n    success: true\n  }\n};"
      },
      "id": "generate-auth-code",
      "name": "Generate Auth Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1650, 400]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO telegram_auth_requests (\n  telegram_chat_id,\n  telegram_username,\n  email,\n  verification_code,\n  expires_at\n) VALUES (\n  '{{ $json.chatId }}',\n  '{{ $json.telegramUsername }}',\n  '{{ $json.artisanEmail }}',\n  '{{ $json.verificationCode }}',\n  NOW() + INTERVAL '10 minutes'\n)\nON CONFLICT (telegram_chat_id) \nDO UPDATE SET \n  verification_code = EXCLUDED.verification_code,\n  expires_at = EXCLUDED.expires_at,\n  used = false;",
        "options": {}
      },
      "id": "store-auth-request",
      "name": "Store Auth Request",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1850, 400],
      "credentials": {
        "postgres": {
          "id": "postgres-db",
          "name": "Artisan Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  tar.email,\n  tar.telegram_username,\n  u.id as user_id,\n  u.name,\n  u.email as user_email\nFROM telegram_auth_requests tar\nJOIN users u ON tar.email = u.email\nWHERE tar.telegram_chat_id = '{{ $node[\"Extract Message Data\"].json.chatId }}'\n  AND tar.verification_code = '{{ $json.verificationCode }}'\n  AND tar.expires_at > NOW()\n  AND tar.used = false\n  AND u.role = 'ARTISAN'\nLIMIT 1;",
        "options": {}
      },
      "id": "verify-code",
      "name": "Verify Code",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1450, 600],
      "credentials": {
        "postgres": {
          "id": "postgres-db",
          "name": "Artisan Database"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const verificationResult = $input.item.json;\nconst chatId = $node[\"Extract Message Data\"].json.chatId;\nconst verificationCode = $node[\"Handle Unauthorized\"].json.verificationCode;\n\nif (!verificationResult || verificationResult.length === 0) {\n  return {\n    json: {\n      chatId: chatId,\n      message: `‚ùå <b>Invalid Verification Code</b>\\n\\nThe code you entered is either:\\n‚Ä¢ Incorrect\\n‚Ä¢ Expired (10 minutes limit)\\n‚Ä¢ Already used\\n\\nüîÑ <b>Try again:</b>\\n1. Send <code>/auth your@email.com</code>\\n2. Get a new verification code\\n3. Enter the 6-digit code\\n\\nNeed help? Contact support.`,\n      parse_mode: 'HTML',\n      success: false\n    }\n  };\n}\n\nconst userData = verificationResult[0];\n\nreturn {\n  json: {\n    chatId: chatId,\n    userId: userData.user_id,\n    userEmail: userData.user_email,\n    userName: userData.name,\n    telegramUsername: userData.telegram_username,\n    verificationCode: verificationCode,\n    message: `‚úÖ <b>Authorization Successful!</b>\\n\\nWelcome ${userData.name}! üé®\\n\\nYour Telegram account is now linked to your artisan profile.\\n\\nüöÄ <b>You can now:</b>\\n‚Ä¢ Check your orders: <code>/myorders</code>\\n‚Ä¢ View statistics: <code>/stats</code>\\n‚Ä¢ Get order details: Send order number\\n‚Ä¢ Ask AI questions about your business\\n\\nüí° <b>Try asking:</b>\\n\"What's my revenue this month?\"\\n\"Show me pending orders\"\\n\\nType <code>/help</code> for all commands! ü§ñ`,\n    parse_mode: 'HTML',\n    success: true\n  }\n};"
      },
      "id": "process-verification",
      "name": "Process Verification",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1650, 600]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Update user with Telegram info and mark as authorized\nUPDATE users \nSET \n  telegram_chat_id = '{{ $json.chatId }}',\n  telegram_username = '{{ $json.telegramUsername }}',\n  telegram_authorized = true,\n  telegram_authorized_at = NOW(),\n  updated_at = NOW()\nWHERE id = '{{ $json.userId }}';",
        "options": {}
      },
      "id": "authorize-user",
      "name": "Authorize User",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1850, 600],
      "credentials": {
        "postgres": {
          "id": "postgres-db",
          "name": "Artisan Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Mark the auth request as used\nUPDATE telegram_auth_requests \nSET used = true \nWHERE telegram_chat_id = '{{ $json.chatId }}' \n  AND verification_code = '{{ $json.verificationCode }}';",
        "options": {}
      },
      "id": "mark-auth-used",
      "name": "Mark Auth Used",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [2050, 600],
      "credentials": {
        "postgres": {
          "id": "postgres-db",
          "name": "Artisan Database"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const userName = $node[\"Extract Message Data\"].json.userName;\n\nconst unauthorizedMessage = `üîí <b>Access Restricted</b>\\n\\nHi ${userName}! This bot is for registered artisans only.\\n\\nüé® <b>To access the bot:</b>\\n\\n1Ô∏è‚É£ <b>Register as an artisan</b> on our platform\\n2Ô∏è‚É£ <b>Send authorization command:</b>\\n   <code>/auth your@email.com</code>\\n   <i>or</i>\\n   <code>/auth +1234567890</code>\\n\\n3Ô∏è‚É£ <b>Enter verification code</b> we send you\\n\\nüìß <b>Example:</b>\\n<code>/auth artisan@example.com</code>\\n\\n‚ùì <b>Need help?</b>\\n‚Ä¢ Make sure you're registered as an artisan\\n‚Ä¢ Use the same email/phone from your account\\n‚Ä¢ Contact support if you need assistance\\n\\nüöÄ Once authorized, you can manage orders, view analytics, and chat with AI about your business!`;\n\nreturn {\n  json: {\n    chatId: $node[\"Extract Message Data\"].json.chatId,\n    message: unauthorizedMessage,\n    parse_mode: 'HTML'\n  }\n};"
      },
      "id": "unauthorized-response",
      "name": "Unauthorized Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1450, 700]
    },
    {
      "parameters": {
        "jsCode": "// Parse authorized user's message for bot commands\nconst artisan = $input.item.json[0];\nconst messageText = $node[\"Extract Message Data\"].json.messageText.toLowerCase().trim();\nconst originalText = $node[\"Extract Message Data\"].json.messageText.trim();\n\n// Define bot commands and patterns\nconst commands = {\n  '/start': 'welcome',\n  '/help': 'help',\n  '/orders': 'list_orders',\n  '/myorders': 'my_orders',\n  '/stats': 'order_stats',\n  '/pending': 'pending_orders',\n  '/completed': 'completed_orders'\n};\n\n// Check for direct commands first\nlet commandType = 'ai_query'; // Default to AI processing\nlet orderNumber = null;\n\nif (commands[messageText]) {\n  commandType = commands[messageText];\n} else {\n  // Check for order number pattern (ORD-xxxxx or just numbers)\n  const orderNumberMatch = messageText.match(/(?:ord[-_]?)?(\\d{4,6})/i);\n  if (orderNumberMatch) {\n    commandType = 'order_details';\n    orderNumber = orderNumberMatch[1];\n  }\n}\n\nreturn {\n  json: {\n    chatId: $node[\"Extract Message Data\"].json.chatId,\n    artisanId: artisan.id,\n    artisanName: artisan.name,\n    artisanEmail: artisan.email,\n    messageText: originalText,\n    commandType: commandType,\n    orderNumber: orderNumber,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "id": "parse-authorized-message",
      "name": "Parse Authorized Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "welcome",
              "leftValue": "={{ $json.commandType }}",
              "rightValue": "welcome",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "help",
              "leftValue": "={{ $json.commandType }}",
              "rightValue": "help",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "order_details",
              "leftValue": "={{ $json.commandType }}",
              "rightValue": "order_details",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "my_orders",
              "leftValue": "={{ $json.commandType }}",
              "rightValue": "my_orders",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "order_stats",
              "leftValue": "={{ $json.commandType }}",
              "rightValue": "order_stats",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "ai_query",
              "leftValue": "={{ $json.commandType }}",
              "rightValue": "ai_query",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "route-bot-commands",
      "name": "Route Bot Commands",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [1250, 300]
    },
    {
      "parameters": {
        "jsCode": "const artisanName = $input.item.json.artisanName;\n\nconst welcomeMessage = `üé® <b>Welcome back, ${artisanName}!</b>\\n\\nYour AI-powered business assistant is ready! ü§ñ‚ú®\\n\\nüìã <b>Quick Commands:</b>\\n‚Ä¢ <code>/myorders</code> - Your recent orders\\n‚Ä¢ <code>/stats</code> - Business analytics\\n‚Ä¢ <code>/pending</code> - Orders needing attention\\n\\nüîç <b>Smart Queries:</b>\\n‚Ä¢ \"Show order 12345 details\"\\n‚Ä¢ \"What's my revenue this month?\"\\n‚Ä¢ \"Help write customer message\"\\n‚Ä¢ \"Which products sell best?\"\\n\\nüí° <b>Pro Tips:</b>\\n‚Ä¢ Just send order numbers for details\\n‚Ä¢ Ask questions in natural language\\n‚Ä¢ I understand context and follow-ups\\n\\nWhat would you like to know about your business? üöÄ`;\n\nreturn {\n  json: {\n    chatId: $input.item.json.chatId,\n    message: welcomeMessage,\n    parse_mode: 'HTML'\n  }\n};"
      },
      "id": "welcome-authorized",
      "name": "Welcome Authorized",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1450, 200]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  o.id,\n  o.order_number,\n  o.status,\n  o.total,\n  o.created_at,\n  json_extract_path_text(o.shipping_address, 'fullName') as customer_name,\n  json_extract_path_text(o.shipping_address, 'email') as customer_email,\n  json_extract_path_text(o.shipping_address, 'phone') as customer_phone,\n  o.shipping_address,\n  array_agg(oi.name) as product_names,\n  array_agg(oi.quantity) as quantities,\n  array_agg(oi.price) as prices\nFROM orders o\nJOIN order_items oi ON o.id = oi.order_id\nJOIN products p ON oi.product_id = p.id\nWHERE o.order_number LIKE '%{{ $json.orderNumber }}%'\n  AND p.user_id = '{{ $json.artisanId }}'\nGROUP BY o.id, o.order_number, o.status, o.total, o.created_at, o.shipping_address\nORDER BY o.created_at DESC\nLIMIT 1;",
        "options": {}
      },
      "id": "get-order-details-auth",
      "name": "Get Order Details Auth",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1450, 300],
      "credentials": {
        "postgres": {
          "id": "postgres-db",
          "name": "Artisan Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  o.id,\n  o.order_number,\n  o.status,\n  o.total,\n  o.created_at,\n  json_extract_path_text(o.shipping_address, 'fullName') as customer_name,\n  COUNT(oi.id) as item_count\nFROM orders o\nJOIN order_items oi ON o.id = oi.order_id\nJOIN products p ON oi.product_id = p.id\nWHERE p.user_id = '{{ $json.artisanId }}'\nGROUP BY o.id, o.order_number, o.status, o.total, o.created_at, o.shipping_address\nORDER BY o.created_at DESC\nLIMIT 10;",
        "options": {}
      },
      "id": "get-my-orders-auth",
      "name": "Get My Orders Auth",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1450, 350],
      "credentials": {
        "postgres": {
          "id": "postgres-db",
          "name": "Artisan Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  COUNT(*) as total_orders,\n  SUM(CASE WHEN o.status = 'PENDING' THEN 1 ELSE 0 END) as pending_orders,\n  SUM(CASE WHEN o.status = 'COMPLETED' THEN 1 ELSE 0 END) as completed_orders,\n  SUM(CASE WHEN DATE(o.created_at) = CURRENT_DATE THEN 1 ELSE 0 END) as today_orders,\n  SUM(CASE WHEN EXTRACT(MONTH FROM o.created_at) = EXTRACT(MONTH FROM CURRENT_DATE) \n           AND EXTRACT(YEAR FROM o.created_at) = EXTRACT(YEAR FROM CURRENT_DATE) \n           THEN o.total ELSE 0 END) as monthly_revenue,\n  SUM(o.total) as total_revenue,\n  AVG(o.total) as avg_order_value\nFROM orders o\nJOIN order_items oi ON o.id = oi.order_id\nJOIN products p ON oi.product_id = p.id\nWHERE p.user_id = '{{ $json.artisanId }}';",
        "options": {}
      },
      "id": "get-order-stats-auth",
      "name": "Get Order Stats Auth",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1450, 400],
      "credentials": {
        "postgres": {
          "id": "postgres-db",
          "name": "Artisan Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Get comprehensive business context for AI\nSELECT \n  COUNT(*) as total_orders,\n  SUM(CASE WHEN o.status = 'PENDING' THEN 1 ELSE 0 END) as pending_orders,\n  SUM(CASE WHEN o.status = 'COMPLETED' THEN 1 ELSE 0 END) as completed_orders,\n  SUM(CASE WHEN DATE(o.created_at) = CURRENT_DATE THEN 1 ELSE 0 END) as today_orders,\n  SUM(CASE WHEN DATE(o.created_at) = CURRENT_DATE - INTERVAL '1 day' THEN 1 ELSE 0 END) as yesterday_orders,\n  SUM(CASE WHEN EXTRACT(MONTH FROM o.created_at) = EXTRACT(MONTH FROM CURRENT_DATE) \n           AND EXTRACT(YEAR FROM o.created_at) = EXTRACT(YEAR FROM CURRENT_DATE) \n           THEN o.total ELSE 0 END) as monthly_revenue,\n  SUM(CASE WHEN EXTRACT(WEEK FROM o.created_at) = EXTRACT(WEEK FROM CURRENT_DATE) \n           AND EXTRACT(YEAR FROM o.created_at) = EXTRACT(YEAR FROM CURRENT_DATE) \n           THEN o.total ELSE 0 END) as weekly_revenue,\n  SUM(o.total) as total_revenue,\n  MAX(o.created_at) as last_order_date,\n  AVG(o.total) as avg_order_value\nFROM orders o\nJOIN order_items oi ON o.id = oi.order_id\nJOIN products p ON oi.product_id = p.id\nWHERE p.user_id = '{{ $json.artisanId }}';",
        "options": {}
      },
      "id": "get-business-context-auth",
      "name": "Get Business Context Auth",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1450, 500],
      "credentials": {
        "postgres": {
          "id": "postgres-db",
          "name": "Artisan Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Get recent orders for AI context\nSELECT \n  o.id,\n  o.order_number,\n  o.status,\n  o.total,\n  o.created_at,\n  json_extract_path_text(o.shipping_address, 'fullName') as customer_name,\n  json_extract_path_text(o.shipping_address, 'email') as customer_email,\n  json_extract_path_text(o.shipping_address, 'phone') as customer_phone,\n  array_agg(oi.name) as products,\n  array_agg(oi.quantity) as quantities\nFROM orders o\nJOIN order_items oi ON o.id = oi.order_id\nJOIN products p ON oi.product_id = p.id\nWHERE p.user_id = '{{ $json.artisanId }}'\nGROUP BY o.id, o.order_number, o.status, o.total, o.created_at, o.shipping_address\nORDER BY o.created_at DESC\nLIMIT 20;",
        "options": {}
      },
      "id": "get-recent-orders-auth",
      "name": "Get Recent Orders Auth",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1650, 500],
      "credentials": {
        "postgres": {
          "id": "postgres-db",
          "name": "Artisan Database"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Prepare context for Gemini AI\nconst userQuery = $node[\"Parse Authorized Message\"].json.messageText;\nconst artisanName = $node[\"Parse Authorized Message\"].json.artisanName;\nconst businessStats = $input.item.json[0] || {};\nconst recentOrders = $node[\"Get Recent Orders Auth\"].json || [];\n\n// Format business context\nconst businessContext = `\nBUSINESS OVERVIEW:\n- Total Orders: ${businessStats.total_orders || 0}\n- Pending Orders: ${businessStats.pending_orders || 0}\n- Completed Orders: ${businessStats.completed_orders || 0}\n- Today's Orders: ${businessStats.today_orders || 0}\n- Yesterday's Orders: ${businessStats.yesterday_orders || 0}\n- Monthly Revenue: ‚Çπ${parseFloat(businessStats.monthly_revenue || 0).toFixed(2)}\n- Weekly Revenue: ‚Çπ${parseFloat(businessStats.weekly_revenue || 0).toFixed(2)}\n- Total Revenue: ‚Çπ${parseFloat(businessStats.total_revenue || 0).toFixed(2)}\n- Average Order Value: ‚Çπ${parseFloat(businessStats.avg_order_value || 0).toFixed(2)}\n- Last Order: ${businessStats.last_order_date ? new Date(businessStats.last_order_date).toLocaleDateString('en-IN') : 'N/A'}\n`;\n\n// Format recent orders context\nlet ordersContext = \"\\nRECENT ORDERS:\\n\";\nrecentOrders.slice(0, 10).forEach((order, index) => {\n  ordersContext += `${index + 1}. Order #${order.order_number} - ${order.status.toUpperCase()} - ‚Çπ${parseFloat(order.total).toFixed(2)} - ${order.customer_name || 'N/A'} - ${new Date(order.created_at).toLocaleDateString('en-IN')}\\n`;\n});\n\n// Create comprehensive prompt for Gemini\nconst geminiPrompt = `You are an intelligent business assistant for an artisan marketplace. You help artisans manage their orders and business.\n\nCONTEXT:\n${businessContext}\n${ordersContext}\n\nARTISAN: ${artisanName}\nQUERY: \"${userQuery}\"\n\nINSTRUCTIONS:\n1. Answer naturally and conversationally\n2. Use emojis appropriately for better UX\n3. Format numbers clearly (‚Çπ for currency)\n4. If asked about specific orders, reference the data above\n5. For business advice, be helpful and actionable\n6. If you need more specific data, suggest what commands to use\n7. Keep responses under 300 words for Telegram\n8. Use HTML formatting for better readability\n\nFor order-specific queries, you have access to recent order data. For customer communication help, provide professional templates.\n\nRespond helpfully to: \"${userQuery}\"`;\n\nreturn {\n  json: {\n    chatId: $node[\"Parse Authorized Message\"].json.chatId,\n    artisanName: artisanName,\n    userQuery: userQuery,\n    prompt: geminiPrompt,\n    businessContext: businessStats,\n    recentOrders: recentOrders.slice(0, 5)\n  }\n};"
      },
      "id": "prepare-ai-context-auth",
      "name": "Prepare AI Context Auth",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1850, 500]
    },

    {
      "parameters": {
        "jsCode": "// Format my orders list\nconst ordersData = $input.item.json;\nconst chatId = $node[\"Parse Authorized Message\"].json.chatId;\nconst artisanName = $node[\"Parse Authorized Message\"].json.artisanName;\n\nif (!ordersData || ordersData.length === 0) {\n  return {\n    json: {\n      chatId: chatId,\n      message: `üì¶ <b>Your Orders</b>\\n\\nNo orders found yet, ${artisanName}!\\n\\nOrders will appear here once customers start purchasing your products. üé®`,\n      parse_mode: 'HTML'\n    }\n  };\n}\n\nlet message = `üì¶ <b>Your Recent Orders</b>\\n\\n`;\n\nordersData.forEach((order, index) => {\n  const statusEmoji = {\n    'PENDING': '‚è≥',\n    'PROCESSING': 'üîÑ',\n    'SHIPPED': 'üöö',\n    'DELIVERED': '‚úÖ',\n    'CANCELLED': '‚ùå',\n    'COMPLETED': 'üéâ'\n  };\n  \n  const date = new Date(order.created_at).toLocaleDateString('en-IN', { day: 'numeric', month: 'short' });\n  \n  message += `${index + 1}. ${statusEmoji[order.status] || 'üìã'} <b>#${order.order_number}</b>\\n`;\n  message += `   üí∞ ‚Çπ${parseFloat(order.total).toFixed(2)} ‚Ä¢ ${order.item_count} item(s)\\n`;\n  message += `   üë§ ${order.customer_name || 'N/A'} ‚Ä¢ üìÖ ${date}\\n\\n`;\n});\n\nmessage += `üí° Send order number for details\\n<code>/stats</code> for analytics`;\n\nreturn {\n  json: {\n    chatId: chatId,\n    message: message,\n    parse_mode: 'HTML'\n  }\n};"
      },
      "id": "format-my-orders-auth",
      "name": "Format My Orders Auth",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1650, 350]
    },
    {
      "parameters": {
        "jsCode": "// Format order statistics\nconst statsData = $input.item.json[0] || {};\nconst chatId = $node[\"Parse Authorized Message\"].json.chatId;\nconst artisanName = $node[\"Parse Authorized Message\"].json.artisanName;\n\nlet message = `üìä <b>Business Statistics for ${artisanName}</b>\\n\\n`;\n\nmessage += `üìà <b>Orders Overview:</b>\\n`;\nmessage += `‚Ä¢ Total Orders: ${statsData.total_orders || 0}\\n`;\nmessage += `‚Ä¢ ‚è≥ Pending: ${statsData.pending_orders || 0}\\n`;\nmessage += `‚Ä¢ ‚úÖ Completed: ${statsData.completed_orders || 0}\\n`;\nmessage += `‚Ä¢ üìÖ Today: ${statsData.today_orders || 0}\\n\\n`;\n\nmessage += `üí∞ <b>Revenue:</b>\\n`;\nmessage += `‚Ä¢ This Month: ‚Çπ${parseFloat(statsData.monthly_revenue || 0).toFixed(2)}\\n`;\nmessage += `‚Ä¢ Total Revenue: ‚Çπ${parseFloat(statsData.total_revenue || 0).toFixed(2)}\\n`;\nmessage += `‚Ä¢ Avg Order Value: ‚Çπ${parseFloat(statsData.avg_order_value || 0).toFixed(2)}\\n\\n`;\n\nmessage += `üí° <b>Quick Actions:</b>\\n`;\nmessage += `‚Ä¢ <code>/myorders</code> - View recent orders\\n`;\nmessage += `‚Ä¢ <code>/pending</code> - Pending orders\\n`;\nmessage += `‚Ä¢ Send order number for details`;\n\nreturn {\n  json: {\n    chatId: chatId,\n    message: message,\n    parse_mode: 'HTML'\n  }\n};"
      },
      "id": "format-order-stats-auth",
      "name": "Format Order Stats Auth",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1650, 400]
    },
    {
      "parameters": {
        "jsCode": "// Enhanced order details formatting\nconst orderData = $input.item.json;\n\nif (!orderData || orderData.length === 0) {\n  return {\n    json: {\n      chatId: $node[\"Parse Authorized Message\"].json.chatId,\n      message: `‚ùå <b>Order #${$node[\"Parse Authorized Message\"].json.orderNumber} not found</b>\\n\\nThis order doesn't exist or doesn't belong to you.\\n\\nüí° Try:\\n‚Ä¢ Check the order number\\n‚Ä¢ Use <code>/myorders</code> to see your orders\\n‚Ä¢ Ask \"Show me recent orders\"`,\n      parse_mode: 'HTML'\n    }\n  };\n}\n\nconst order = orderData[0];\nconst orderDate = new Date(order.created_at).toLocaleDateString('en-IN', {\n  day: 'numeric',\n  month: 'short',\n  year: 'numeric',\n  hour: '2-digit',\n  minute: '2-digit'\n});\n\nconst statusEmoji = {\n  'PENDING': '‚è≥',\n  'PROCESSING': 'üîÑ',\n  'SHIPPED': 'üöö',\n  'DELIVERED': '‚úÖ',\n  'CANCELLED': '‚ùå',\n  'COMPLETED': 'üéâ'\n};\n\nconst shippingAddr = order.shipping_address ? JSON.parse(order.shipping_address) : {};\n\n// Format products\nlet productsText = '';\nif (order.product_names && order.quantities && order.prices) {\n  for (let i = 0; i < order.product_names.length; i++) {\n    productsText += `‚Ä¢ ${order.product_names[i]} (Qty: ${order.quantities[i]}) - ‚Çπ${parseFloat(order.prices[i]).toFixed(2)}\\n`;\n  }\n}\n\nconst message = `üì¶ <b>Order Details</b>\\n\\n` +\n  `üî¢ <b>Order:</b> #${order.order_number}\\n` +\n  `${statusEmoji[order.status] || 'üìã'} <b>Status:</b> ${order.status}\\n` +\n  `üí∞ <b>Total:</b> ‚Çπ${parseFloat(order.total).toFixed(2)}\\n` +\n  `üìÖ <b>Date:</b> ${orderDate}\\n\\n` +\n  `üë§ <b>Customer:</b>\\n` +\n  `‚Ä¢ Name: ${order.customer_name || 'N/A'}\\n` +\n  `‚Ä¢ Email: ${order.customer_email || 'N/A'}\\n` +\n  `${order.customer_phone ? `‚Ä¢ Phone: ${order.customer_phone}\\n` : ''}\\n` +\n  `üìç <b>Address:</b>\\n${shippingAddr.addressLine1 || 'N/A'}\\n` +\n  `${shippingAddr.city || 'N/A'}, ${shippingAddr.state || 'N/A'} ${shippingAddr.postalCode || 'N/A'}\\n\\n` +\n  `üõçÔ∏è <b>Items:</b>\\n${productsText}\\n` +\n  `ü§ñ <b>AI Help:</b> Ask me:\\n` +\n  `\"Write customer message about shipping\"\\n` +\n  `\"Handle delay for this order\"`;\n\nreturn {\n  json: {\n    chatId: $node[\"Parse Authorized Message\"].json.chatId,\n    message: message,\n    parse_mode: 'HTML'\n  }\n};"
      },
      "id": "format-order-details-auth",
      "name": "Format Order Details Auth",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1650, 300]
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "={{ $json.message }}",
        "additionalFields": {
          "parse_mode": "={{ $json.parse_mode || 'HTML' }}"
        }
      },
      "id": "send-telegram-response-auth",
      "name": "Send Telegram Response",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [2250, 400],
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-creds",
          "name": "Artisan Bot"
        }
      }
    }
  ],
  "connections": {
    "Telegram Bot Trigger": {
      "main": [
        [
          {
            "node": "Extract Message Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Message Data": {
      "main": [
        [
          {
            "node": "Check Authorization",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Authorization": {
      "main": [
        [
          {
            "node": "Route Authorization",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Authorization": {
      "main": [
        [
          {
            "node": "Parse Authorized Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Unauthorized",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Unauthorized": {
      "main": [
        [
          {
            "node": "Route Auth Commands",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Auth Commands": {
      "main": [
        [
          {
            "node": "Find Artisan",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Verify Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Unauthorized Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Artisan": {
      "main": [
        [
          {
            "node": "Generate Auth Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Auth Code": {
      "main": [
        [
          {
            "node": "Store Auth Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Auth Request": {
      "main": [
        [
          {
            "node": "Send Telegram Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verify Code": {
      "main": [
        [
          {
            "node": "Process Verification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Verification": {
      "main": [
        [
          {
            "node": "Authorize User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Authorize User": {
      "main": [
        [
          {
            "node": "Mark Auth Used",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark Auth Used": {
      "main": [
        [
          {
            "node": "Send Telegram Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unauthorized Response": {
      "main": [
        [
          {
            "node": "Send Telegram Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Authorized Message": {
      "main": [
        [
          {
            "node": "Route Bot Commands",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Bot Commands": {
      "main": [
        [
          {
            "node": "Welcome Authorized",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Telegram Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Order Details Auth",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get My Orders Auth",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Order Stats Auth",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Business Context Auth",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Welcome Authorized": {
      "main": [
        [
          {
            "node": "Send Telegram Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Order Details Auth": {
      "main": [
        [
          {
            "node": "Format Order Details Auth",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get My Orders Auth": {
      "main": [
        [
          {
            "node": "Format My Orders Auth",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Order Stats Auth": {
      "main": [
        [
          {
            "node": "Format Order Stats Auth",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Business Context Auth": {
      "main": [
        [
          {
            "node": "Get Recent Orders Auth",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Recent Orders Auth": {
      "main": [
        [
          {
            "node": "Prepare AI Context Auth",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare AI Context Auth": {
      "main": [
        [
          {
            "node": "Send Telegram Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Order Details Auth": {
      "main": [
        [
          {
            "node": "Send Telegram Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format My Orders Auth": {
      "main": [
        [
          {
            "node": "Send Telegram Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Order Stats Auth": {
      "main": [
        [
          {
            "node": "Send Telegram Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "tags": []
}