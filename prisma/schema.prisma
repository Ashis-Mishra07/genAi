// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model for artisan authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  language  String   @default("en")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products Product[]
  orders   Order[]

  @@map("users")
}

// Product model for artisan products
model Product {
  id             String   @id @default(cuid())
  name           String
  description    String?
  story          String?  // AI generated cultural story
  price          Decimal
  currency       String   @default("INR")
  imageUrl       String?
  posterUrl      String?  // AI generated poster
  instagramUrl   String?  // Instagram post URL
  instagramId    String?  // Instagram media ID
  category       String?
  tags           String[] // Array of tags
  materials      String?  // Product materials
  culture        String?  // Cultural heritage
  artistName     String?  // Artist/creator name
  dimensions     String?  // Product dimensions
  weight         String?  // Product weight
  isActive       Boolean  @default(true)
  isFeatured     Boolean  @default(false)
  stockQuantity  Int      @default(1)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems   OrderItem[]
  inquiries    ProductInquiry[]

  @@map("products")
}

// Order model for tracking sales
model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  status      OrderStatus @default(PENDING)
  totalAmount Decimal
  currency    String      @default("INR")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("orders")
}

// Order items for individual products in an order
model OrderItem {
  id       String  @id @default(cuid())
  quantity Int
  price    Decimal

  // Relations
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

// Product inquiries from buyers
model ProductInquiry {
  id          String        @id @default(cuid())
  buyerName   String?
  buyerEmail  String?
  buyerPhone  String?
  message     String
  source      InquirySource @default(WEBSITE)
  status      InquiryStatus @default(NEW)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_inquiries")
}

// Chat history for MCP interactions
model ChatHistory {
  id        String   @id @default(cuid())
  userId    String
  message   String
  response  String?
  type      ChatType @default(TEXT)
  metadata  Json?    // Store additional data like voice file URLs, etc.
  createdAt DateTime @default(now())

  @@map("chat_history")
}

// Enums
enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum ChatType {
  TEXT
  VOICE
  IMAGE
  PRODUCT_UPLOAD
}

enum InquirySource {
  WEBSITE
  INSTAGRAM
  WHATSAPP
  EMAIL
  PHONE
}

enum InquiryStatus {
  NEW
  CONTACTED
  NEGOTIATING
  CONVERTED
  LOST
}
